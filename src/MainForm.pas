unit MainForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,
  Vcl.StdCtrls, Data.DB, FireDAC.Comp.Client, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.Phys.IBBase, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, Vcl.Grids, Vcl.DBGrids, Globals;

type
  TForm1 = class(TForm)
    FDConnection1: TFDConnection;
    btnCreateDatabase: TButton;
    btnCreateTables: TButton;
    FDPhysFBDriverLink1: TFDPhysFBDriverLink;
    btnInsertUser: TButton;
    DBGrid1: TDBGrid;
    DataSource1: TDataSource;
    FDQuery1: TFDQuery;
    btnLoadUsers: TButton;
    btnTestConnect: TButton;

    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnCreateDatabaseClick(Sender: TObject);
    procedure btnCreateTablesClick(Sender: TObject);
    procedure btnInsertUserClick(Sender: TObject);
    procedure btnLoadUsersClick(Sender: TObject);
    procedure btnTestConnectClick(Sender: TObject);

  private
    { Private declarations }

  public
    { Public declarations }
    procedure AdminAccess(IsAdmin: Boolean);
  end;

var
  Form1: TForm1;
  GlobalFDConnection: TFDConnection; // Shared FDConnection reference

implementation

{$R *.dfm}

//----------------------------------------------
// On Form Creation
//----------------------------------------------
procedure TForm1.FormCreate(Sender: TObject);
begin
  // Load connection parameters from INI file and connect
  FDConnection1.Params.LoadFromFile('DBConnectionParams.ini'); // Optional, if file exists
  FDConnection1.Connected := True;

  // Assign global connection reference for use in other units
  GlobalFDConnection := FDConnection1;
end;

//----------------------------------------------
// Create Firebird database programmatically
//----------------------------------------------
procedure TForm1.btnCreateDatabaseClick(Sender: TObject);
var
  dbPath: string;
begin
  dbPath := 'C:\DelphiProjects\stock-maintenance-system\db\StockDB.fdb';

  // Disconnect if already connected
  if FDConnection1.Connected then
    FDConnection1.Connected := False;

  // Set connection parameters for DB creation
  FDConnection1.Params.Clear;
  FDConnection1.Params.DriverID := 'FB';
  FDConnection1.Params.Database := dbPath;
  FDConnection1.Params.UserName := 'SYSDBA';
  FDConnection1.Params.Password := 'masterkey';
  FDConnection1.Params.Values['CharacterSet'] := 'UTF8';
  FDConnection1.Params.Values['CreateDatabase'] := 'Yes';

  try
    FDConnection1.Connected := True;
    ShowMessage('Database created successfully.');
  except
    on E: Exception do
      ShowMessage('Error creating database: ' + E.Message);
  end;
end;

//----------------------------------------------
// Create all required database tables
//----------------------------------------------
procedure TForm1.btnCreateTablesClick(Sender: TObject);
begin
  try
    FDConnection1.Connected := True;

    // Create Users table
    FDConnection1.ExecSQL(
      'CREATE TABLE Users (' +
      ' UserID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,' +
      ' Username VARCHAR(50) UNIQUE NOT NULL,' +
      ' Password VARCHAR(50) NOT NULL,' +
      ' IsAdmin SMALLINT NOT NULL' +
      ')'
    );

    // Create Suppliers table
    FDConnection1.ExecSQL(
      'CREATE TABLE Suppliers (' +
      ' SupplierID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,' +
      ' SupplierName VARCHAR(100) NOT NULL' +
      ')'
    );

    // Create Products table
    FDConnection1.ExecSQL(
      'CREATE TABLE Products (' +
      ' ProductID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,' +
      ' Barcode VARCHAR(50) UNIQUE NOT NULL,' +
      ' Description VARCHAR(100),' +
      ' Department VARCHAR(50),' +
      ' RetailPrice NUMERIC(10,2),' +
      ' CostPrice NUMERIC(10,2),' +
      ' Markup NUMERIC(5,2) DEFAULT 50,' +
      ' SOH INTEGER DEFAULT 0,' +
      ' SupplierID INTEGER,' +
      ' FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID)' +
      ')'
    );

    ShowMessage('Tables created successfully.');
  except
    on E: Exception do
      ShowMessage('Error creating tables: ' + E.Message);
  end;
end;

//----------------------------------------------
// Insert default users: admin and user
//----------------------------------------------
procedure TForm1.btnInsertUserClick(Sender: TObject);
begin
  // Reset and reconnect to database
  if FDConnection1.Connected then
    FDConnection1.Connected := False;

  FDConnection1.Params.Clear;
  FDConnection1.Params.DriverID := 'FB';
  FDConnection1.Params.Database := 'C:\DelphiProjects\stock-maintenance-system\db\StockDB.fdb';
  FDConnection1.Params.UserName := 'SYSDBA';
  FDConnection1.Params.Password := 'masterkey';
  FDConnection1.Params.Values['CharacterSet'] := 'UTF8';
  FDConnection1.LoginPrompt := False;
  FDConnection1.Connected := True;

  FDQuery1.Connection := FDConnection1;

  // Insert admin if not exists
  FDQuery1.SQL.Text := 'SELECT COUNT(*) FROM Users WHERE Username = ''admin''';
  FDQuery1.Open;
  if FDQuery1.Fields[0].AsInteger = 0 then
    FDConnection1.ExecSQL('INSERT INTO Users (Username, Password, IsAdmin) VALUES (''admin'', ''admin123'', 1)');

  // Insert user if not exists
  FDQuery1.SQL.Text := 'SELECT COUNT(*) FROM Users WHERE Username = ''user''';
  FDQuery1.Open;
  if FDQuery1.Fields[0].AsInteger = 0 then
    FDConnection1.ExecSQL('INSERT INTO Users (Username, Password, IsAdmin) VALUES (''user'', ''user123'', 0)');

  ShowMessage('Default users inserted (if they did not already exist).');
end;

//----------------------------------------------
// Load all users into the grid
//----------------------------------------------
procedure TForm1.btnLoadUsersClick(Sender: TObject);
begin
  // Reconnect with parameters
  FDConnection1.Connected := False;
  FDConnection1.Params.Clear;
  FDConnection1.Params.DriverID := 'FB';
  FDConnection1.Params.Database := 'C:\DelphiProjects\stock-maintenance-system\db\StockDB.fdb';
  FDConnection1.Params.UserName := 'SYSDBA';
  FDConnection1.Params.Password := 'masterkey';
  FDConnection1.Params.Values['CharacterSet'] := 'UTF8';
  FDConnection1.Connected := True;

  // Connect FDQuery1 to the FDConnection1
  FDQuery1.Connection := FDConnection1;

  // Bind query and grid
  DataSource1.DataSet := FDQuery1;
  DBGrid1.DataSource := DataSource1;

  FDQuery1.Close;
  FDQuery1.SQL.Text := 'SELECT * FROM Users';
  FDQuery1.Open;
end;

//----------------------------------------------
// Test database connection
//----------------------------------------------
procedure TForm1.btnTestConnectClick(Sender: TObject);
begin
  try
    FDConnection1.Connected := False;
    FDConnection1.Params.Clear;
    FDConnection1.Params.DriverID := 'FB';
    FDConnection1.Params.Database := 'C:\DelphiProjects\stock-maintenance-system\db\STOCKDB.FDB';
    FDConnection1.Params.UserName := 'SYSDBA';
    FDConnection1.Params.Password := 'masterkey';
    FDConnection1.Params.Values['CharacterSet'] := 'UTF8';

    FDConnection1.Connected := True;

    ShowMessage('Connection successful!');
  except
    on E: Exception do
      ShowMessage('Connection error: ' + E.Message);
  end;
end;

//----------------------------------------------
// Optional: Simulate login bypass (COMMENTED OUT)
//----------------------------------------------
procedure TForm1.FormShow(Sender: TObject);
begin
  // Test: Bypass login directly to admin functions
  // ShowMessage('Bypassing login — admin mode');
  // AdminAccess(True); // Simulate admin access
end;

//----------------------------------------------
// Enable or disable admin-only buttons
//----------------------------------------------
procedure TForm1.AdminAccess(IsAdmin: Boolean);
begin
  btnCreateDatabase.Enabled := IsAdmin;
  btnCreateTables.Enabled := IsAdmin;
  btnInsertUser.Enabled := IsAdmin;
end;

end.

